/**
ğŸ‘‰ : moves the memory pointer to the next cell

ğŸ‘ˆ : moves the memory pointer to the previous cell

ğŸ‘† : increment the memory cell at the current position 

ğŸ‘‡ : decreases the memory cell at the current position. 

ğŸ¤œ : if the memory cell at the current position is 0, jump just after the corresponding ğŸ¤›

ğŸ¤› : if the memory cell at the current position is not 0, jump just after the corresponding ğŸ¤œ

ğŸ‘Š : Display the current character represented by the ASCII code defined by the current position.

- As memory cells are bytes, from 0 to 255 value, if you decrease 0 you'll get  255, if you increment 255 you'll get 0.
- Loops of ğŸ¤œ and ğŸ¤› can be nested. 
*/
const input = [
  ..."ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ¤œğŸ‘‡ğŸ‘ˆğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘‰ğŸ¤›ğŸ‘ˆğŸ‘ŠğŸ‘‰ğŸ‘‰ğŸ‘†ğŸ‘‰ğŸ‘‡ğŸ¤œğŸ‘†ğŸ¤›ğŸ‘†ğŸ‘†ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘†ğŸ¤œğŸ‘‰ğŸ¤œğŸ‘‡ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ˆğŸ‘ˆğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘‰ğŸ¤›ğŸ‘ˆğŸ‘ˆğŸ¤›ğŸ‘‰ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘ŠğŸ‘‰ğŸ‘‡ğŸ‘‰ğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ŠğŸ‘ŠğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ŠğŸ‘‰ğŸ‘‡ğŸ‘ŠğŸ‘ˆğŸ‘ˆğŸ‘†ğŸ¤œğŸ‘‰ğŸ¤œğŸ‘†ğŸ‘‰ğŸ‘†ğŸ¤›ğŸ‘‰ğŸ‘‰ğŸ¤›ğŸ‘ˆğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘ŠğŸ‘‰ğŸ‘‰ğŸ‘ŠğŸ‘†ğŸ‘†ğŸ‘†ğŸ‘ŠğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘ŠğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘‡ğŸ‘ŠğŸ‘‰ğŸ‘†ğŸ‘ŠğŸ‘‰ğŸ‘†ğŸ‘Š",
];
let inputPosition = 0;

const cell = [0];
let cellPosition = 0;

const result = [];

// Variables
const MAX_SIZE = 255;
const MIN_SIZE = 0;

function nextCell() {
  cellPosition += 1;

  if (cellPosition >= cell.length) {
    cell.push(0);
  }
}

function previousCell() {
  cellPosition -= 1;
}

function incrementCell() {
  cell[cellPosition] =
    cell[cellPosition] === MAX_SIZE ? MIN_SIZE : (cell[cellPosition] += 1);
}

function decreaseCell() {
  cell[cellPosition] =
    cell[cellPosition] === MIN_SIZE ? MAX_SIZE : (cell[cellPosition] -= 1);
}

function startLoop() {
  if (cell[cellPosition] === 0) {
    inputPosition = loop[inputPosition];
  }
}

function endLoop() {
  if (cell[cellPosition] !== 0) {
    inputPosition = loop[inputPosition];
  }
}

function displayChar() {
  result.push(String.fromCharCode(cell[cellPosition]));
}

const stack = [];
const loop = {};

input.forEach((c, i) => {
  if (c === "ğŸ¤œ") {
    stack.push(i);
  }

  if (c === "ğŸ¤›") {
    const start = stack.pop();

    loop[start] = i;
    loop[i] = start;
  }
});

const eventKeyword = {
  "ğŸ¤œ": startLoop,
  "ğŸ¤›": endLoop,
  "ğŸ‘‰": nextCell,
  "ğŸ‘†": incrementCell,
  "ğŸ‘ˆ": previousCell,
  "ğŸ‘Š": displayChar,
  "ğŸ‘‡": decreaseCell,
};

for (inputPosition; inputPosition < input.length; inputPosition++) {
  eventKeyword[input[inputPosition]]();
}

console.log(result.join(""));
